- React is a JS library to create reusable components
- uses JSX = JavaScript XML for html-like code
- lightweight version of the real DOM [updated real time, no need to refresh]

- npm create vite@latest

- you can do external styling [global/affects all components]
- you can create a dedicated style sheet for each component [.modules.<component-name>]
- you can do inline styling for components that need minimal styling

PROPS
- read only properties shared between components
- parent component can send data to a child component 

PROP TYPES
- mechanism that ensures that passed value is of correct datatype
- when an incorrect data type is entered, it will issue a warning in the console
example: age: PropTypes.number

DEFAULT PROPS
- default values for props in case they are not passed from the parent component
example: name: "Guest" 

CONDITIONAL RENDERING
- control what gets rendered in the application based on certain conditions [show, hid, or change components]
- you can use if-else, the ternary operator or store the elements in const then check for the conditions

LISTS
- have a list 
- convert the list items into <li/> elements 
- each list item can have properties
- each list item must have a unique id
- you can sort the list items
- you can make filters to render selected list items

CLICK EVENT
- interaction when user clicks on an element
- response to clicks [pass a callback to the onClick event handler]
- you can pass parameters on the onClick event
- you can also have different onClick events for different conditions 
- if you have more than one line of code for the event, use {}
- wrap the handler in an arrow function 

- you are automatically provided an event object [e] parameter and this has different properties
- there is also an onDoubleClick event handler

REACT HOOK
- special function 
- allows functional components to use React features without writing class components
- you need to import React in your component but you can also use object desrtructuring to import only the necessary hooks

useState() 
- react hook 
- allows the creation of a stateful variable and a setter function to update its value in the Virtual DOM

onChange
- event handler
- used with form elements 
- triggers a function everytime the value of the input changes


UPDATER FUNCTIONS
- function passed as an argument to setState
- Allow for safe update based on pervious stateful
- used with multiple state updates and asynchronous functions
Example: setVar(prevVar => prevVar_update)
- rename the stateful variable
- takes the pending state to calculate the next state
- puts the updater function in a queue then it will be called during the next render [FCFS]
- good practice to use updater functions